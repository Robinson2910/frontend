{"ast":null,"code":"import { configureStore } from \"@reduxjs/toolkit\";\nimport accountReducer from \"./features/accounts/accountSlice\";\nimport customerReducer from \"./features/customers/customerSlice\";\nconst store = configureStore({\n  reducer: {\n    account: accountReducer,\n    customer: customerReducer\n  }\n});\nexport default store;\n\n//redux toolkit notes\n// import { configureStore } from \"@reduxjs/toolkit\";\n\n//using the above create a store and thus two slices of state will be created\n\n//and in slice\n\n//import { createSlice } from \"@reduxjs/toolkit\";\n\n//using create slice\n\n//create a slice\n\n// createSlice is a function provided by the Redux Toolkit, which is a library that simplifies the management of state in a Redux-based application.\n// Specifically, createSlice is used to create a \"slice\" of the Redux store, which typically includes both a reducer and a set of action creators.\n\n// Here's what createSlice does:\n\n// Reducer: It automatically generates a reducer function for your slice. This reducer will handle actions related to\n//  the state managed by that slice. The reducer is a pure function that takes the current state and an action and\n// returns the new state based on the action.\n\n// Action Creators: It also generates action creators for the actions that can be dispatched to update the state managed by the slice.\n//  These action creators are functions that produce action objects with a specific format, making it easier to dispatch actions.\n\n// Action Types: It creates action types as string constants. These action types are used to match actions in the reducer,\n// ensuring that the reducer knows how to respond to specific actions.\n\n// export const { withdraw, requestLoan, payLoan } = accountSlice.actions;//action creators will be used along with dispatch to change the state in store\n// // export default accountSlice.reducer;\n\n//INSIDE THE COMPONENT\n\n// import { useDispatch, useSelector } from \"react-redux\"; //importing use dispatch and use selector\n// import { deposit, payLoan, requestLoan, withdraw } from \"./accountSlice\"; //importing action creators\n\n//  \"useSelector\" is a hook provided by the React-Redux library,\n// and it's used to access the state stored in a Redux store within a React component.","map":{"version":3,"names":["configureStore","accountReducer","customerReducer","store","reducer","account","customer"],"sources":["C:/Users/Robinson/Desktop/front_end/react/15-redux-intro/project/src/store.js"],"sourcesContent":["import { configureStore } from \"@reduxjs/toolkit\";\n\nimport accountReducer from \"./features/accounts/accountSlice\";\nimport customerReducer from \"./features/customers/customerSlice\";\n\nconst store = configureStore({\n  reducer: {\n    account: accountReducer,\n    customer: customerReducer,\n  },\n});\n\nexport default store;\n\n//redux toolkit notes\n// import { configureStore } from \"@reduxjs/toolkit\";\n\n//using the above create a store and thus two slices of state will be created\n\n//and in slice\n\n//import { createSlice } from \"@reduxjs/toolkit\";\n\n//using create slice\n\n//create a slice\n\n// createSlice is a function provided by the Redux Toolkit, which is a library that simplifies the management of state in a Redux-based application.\n// Specifically, createSlice is used to create a \"slice\" of the Redux store, which typically includes both a reducer and a set of action creators.\n\n// Here's what createSlice does:\n\n// Reducer: It automatically generates a reducer function for your slice. This reducer will handle actions related to\n//  the state managed by that slice. The reducer is a pure function that takes the current state and an action and\n// returns the new state based on the action.\n\n// Action Creators: It also generates action creators for the actions that can be dispatched to update the state managed by the slice.\n//  These action creators are functions that produce action objects with a specific format, making it easier to dispatch actions.\n\n// Action Types: It creates action types as string constants. These action types are used to match actions in the reducer,\n// ensuring that the reducer knows how to respond to specific actions.\n\n// export const { withdraw, requestLoan, payLoan } = accountSlice.actions;//action creators will be used along with dispatch to change the state in store\n// // export default accountSlice.reducer;\n\n//INSIDE THE COMPONENT\n\n// import { useDispatch, useSelector } from \"react-redux\"; //importing use dispatch and use selector\n// import { deposit, payLoan, requestLoan, withdraw } from \"./accountSlice\"; //importing action creators\n\n//  \"useSelector\" is a hook provided by the React-Redux library,\n// and it's used to access the state stored in a Redux store within a React component.\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,kBAAkB;AAEjD,OAAOC,cAAc,MAAM,kCAAkC;AAC7D,OAAOC,eAAe,MAAM,oCAAoC;AAEhE,MAAMC,KAAK,GAAGH,cAAc,CAAC;EAC3BI,OAAO,EAAE;IACPC,OAAO,EAAEJ,cAAc;IACvBK,QAAQ,EAAEJ;EACZ;AACF,CAAC,CAAC;AAEF,eAAeC,KAAK;;AAEpB;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}