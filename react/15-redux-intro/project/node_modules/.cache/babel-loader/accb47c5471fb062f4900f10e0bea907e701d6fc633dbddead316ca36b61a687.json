{"ast":null,"code":"import { configureStore } from \"@reduxjs/toolkit\";\nimport accountReducer from \"./features/accounts/accountSlice\";\nimport customerReducer from \"./features/customers/customerSlice\";\nconst store = configureStore({\n  reducer: {\n    account: accountReducer,\n    customer: customerReducer\n  }\n});\nexport default store;\n\n//redux toolkit notes\n// import { configureStore } from \"@reduxjs/toolkit\";\n\n//using the above create a store and thus two slices of state will be created\n\n//and in slice\n\n//import { createSlice } from \"@reduxjs/toolkit\";\n\n//using create slice\n\n//create a slice\n\n// createSlice is a function provided by the Redux Toolkit, which is a library that simplifies the management of state in a Redux-based application.\n// Specifically, createSlice is used to create a \"slice\" of the Redux store, which typically includes both a reducer and a set of action creators.\n\n// Here's what createSlice does:\n\n// Reducer: It automatically generates a reducer function for your slice. This reducer will handle actions related to\n//  the state managed by that slice. The reducer is a pure function that takes the current state and an action and\n// returns the new state based on the action.\n\n// Action Creators: It also generates action creators for the actions that can be dispatched to update the state managed by the slice.\n//  These action creators are functions that produce action objects with a specific format, making it easier to dispatch actions.\n\n// Action Types: It creates action types as string constants. These action types are used to match actions in the reducer,\n// ensuring that the reducer knows how to respond to specific actions.\n\n// export const { withdraw, requestLoan, payLoan } = accountSlice.actions;//action creators will be used along with dispatch to change the state in store\n// // export default accountSlice.reducer;\n\n//INSIDE THE COMPONENT\n\n// import { useDispatch, useSelector } from \"react-redux\"; //importing use dispatch and use selector\n// import { deposit, payLoan, requestLoan, withdraw } from \"./accountSlice\"; //importing action creators\n\n//  \"useSelector\" is a hook provided by the React-Redux library,\n// and it's used to access the state stored in a Redux store within a React component.\n\n// Redux Store:\n\n// In Redux, a store is the central place where your application's state is stored.\n// It allows you to access and update the application's state.\n\n// Reducers:\n\n// Reducers are pure functions that specify how the application's state changes in response to actions.\n// Each reducer typically manages a specific slice of the application's state.\n\n// dispatch Function:\n// In Redux, the dispatch function is used to send an action to the store, which in turn triggers the state to be updated by the reducers.\n// It is the primary method for interacting with the Redux store, allowing you to trigger changes in the application's state by dispatching actions.\n\n// combineReducers Function:\n\n// The combineReducers function is used to combine multiple reducers into a single root reducer.\n// In your code, you're combining accountReducer and customerReducer into a single root reducer using the combineReducers function.\n// Middleware:\n\n// Middleware in Redux provides a way to extend the store's functionality.\n// In your code, you're using the applyMiddleware function from Redux to apply the thunk middleware.\n// Thunk Middleware:\n\n// Thunk is a middleware that allows you to write asynchronous logic in your Redux actions.\n// It enables you to dispatch functions, not just plain action objects.\n// Thunk is often used for making asynchronous API calls or performing other side effects in Redux.\n// createStore Function:\n\n// The createStore function is used to create a Redux store.\n// It takes the root reducer and optional middleware as arguments.\n// Global State:\n\n// ************\n\n// The global state in your application will be structured based on the reducers you combine ************\n\n// In your case, the global state will have two slices: account and customer, each managed by its respective reducer.\n// Exporting the Store:\n\n// You are exporting the Redux store at the end of the code to make it available for use in other parts of your application.\n// In summary, the code you provided sets up a Redux store with two reducers (accountReducer and customerReducer) using the combineReducers function. It applies the thunk middleware to allow asynchronous actions. The resulting store is exported for use in other parts of your application. This setup is commonly used in Redux to manage the application's state and handle asynchronous actions.","map":{"version":3,"names":["configureStore","accountReducer","customerReducer","store","reducer","account","customer"],"sources":["C:/Users/Robinson/Desktop/front_end/react/15-redux-intro/project/src/store.js"],"sourcesContent":["import { configureStore } from \"@reduxjs/toolkit\";\n\nimport accountReducer from \"./features/accounts/accountSlice\";\nimport customerReducer from \"./features/customers/customerSlice\";\n\nconst store = configureStore({\n  reducer: {\n    account: accountReducer,\n    customer: customerReducer,\n  },\n});\n\nexport default store;\n\n//redux toolkit notes\n// import { configureStore } from \"@reduxjs/toolkit\";\n\n//using the above create a store and thus two slices of state will be created\n\n//and in slice\n\n//import { createSlice } from \"@reduxjs/toolkit\";\n\n//using create slice\n\n//create a slice\n\n// createSlice is a function provided by the Redux Toolkit, which is a library that simplifies the management of state in a Redux-based application.\n// Specifically, createSlice is used to create a \"slice\" of the Redux store, which typically includes both a reducer and a set of action creators.\n\n// Here's what createSlice does:\n\n// Reducer: It automatically generates a reducer function for your slice. This reducer will handle actions related to\n//  the state managed by that slice. The reducer is a pure function that takes the current state and an action and\n// returns the new state based on the action.\n\n// Action Creators: It also generates action creators for the actions that can be dispatched to update the state managed by the slice.\n//  These action creators are functions that produce action objects with a specific format, making it easier to dispatch actions.\n\n// Action Types: It creates action types as string constants. These action types are used to match actions in the reducer,\n// ensuring that the reducer knows how to respond to specific actions.\n\n// export const { withdraw, requestLoan, payLoan } = accountSlice.actions;//action creators will be used along with dispatch to change the state in store\n// // export default accountSlice.reducer;\n\n//INSIDE THE COMPONENT\n\n// import { useDispatch, useSelector } from \"react-redux\"; //importing use dispatch and use selector\n// import { deposit, payLoan, requestLoan, withdraw } from \"./accountSlice\"; //importing action creators\n\n//  \"useSelector\" is a hook provided by the React-Redux library,\n// and it's used to access the state stored in a Redux store within a React component.\n\n// Redux Store:\n\n// In Redux, a store is the central place where your application's state is stored.\n// It allows you to access and update the application's state.\n\n// Reducers:\n\n// Reducers are pure functions that specify how the application's state changes in response to actions.\n// Each reducer typically manages a specific slice of the application's state.\n\n// dispatch Function:\n// In Redux, the dispatch function is used to send an action to the store, which in turn triggers the state to be updated by the reducers.\n// It is the primary method for interacting with the Redux store, allowing you to trigger changes in the application's state by dispatching actions.\n\n// combineReducers Function:\n\n// The combineReducers function is used to combine multiple reducers into a single root reducer.\n// In your code, you're combining accountReducer and customerReducer into a single root reducer using the combineReducers function.\n// Middleware:\n\n// Middleware in Redux provides a way to extend the store's functionality.\n// In your code, you're using the applyMiddleware function from Redux to apply the thunk middleware.\n// Thunk Middleware:\n\n// Thunk is a middleware that allows you to write asynchronous logic in your Redux actions.\n// It enables you to dispatch functions, not just plain action objects.\n// Thunk is often used for making asynchronous API calls or performing other side effects in Redux.\n// createStore Function:\n\n// The createStore function is used to create a Redux store.\n// It takes the root reducer and optional middleware as arguments.\n// Global State:\n\n// ************\n\n// The global state in your application will be structured based on the reducers you combine ************\n\n// In your case, the global state will have two slices: account and customer, each managed by its respective reducer.\n// Exporting the Store:\n\n// You are exporting the Redux store at the end of the code to make it available for use in other parts of your application.\n// In summary, the code you provided sets up a Redux store with two reducers (accountReducer and customerReducer) using the combineReducers function. It applies the thunk middleware to allow asynchronous actions. The resulting store is exported for use in other parts of your application. This setup is commonly used in Redux to manage the application's state and handle asynchronous actions.\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,kBAAkB;AAEjD,OAAOC,cAAc,MAAM,kCAAkC;AAC7D,OAAOC,eAAe,MAAM,oCAAoC;AAEhE,MAAMC,KAAK,GAAGH,cAAc,CAAC;EAC3BI,OAAO,EAAE;IACPC,OAAO,EAAEJ,cAAc;IACvBK,QAAQ,EAAEJ;EACZ;AACF,CAAC,CAAC;AAEF,eAAeC,KAAK;;AAEpB;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}