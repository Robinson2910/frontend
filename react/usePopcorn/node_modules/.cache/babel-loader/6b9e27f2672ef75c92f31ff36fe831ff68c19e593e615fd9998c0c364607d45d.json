{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nconst KEY = \"88a56d52\";\nexport function useMovies(query) {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  // const [query, setQuery] = useState(\"\");\n\n  useEffect(() => {\n    // callback?.();\n    // Create the AbortController instance.\n    const controller = new AbortController();\n    async function fetchMovies() {\n      try {\n        setError(\"\");\n        setIsLoading(true);\n\n        // Use the signal from the controller in the fetch request.\n        const response = await fetch(`https://www.omdbapi.com/?s=${query}&apikey=${KEY}`, {\n          signal: controller.signal\n        });\n        if (!response.ok) {\n          throw new Error(\"Something went wrong with fetching movies\");\n        }\n        const data = await response.json();\n        if (data.Response === \"False\") {\n          throw new Error(\"Movie not found\");\n        }\n\n        // Check if the component is still mounted before setting state.\n        if (!controller.signal.aborted) {\n          setMovies(data.Search);\n          setIsLoading(false);\n        }\n      } catch (err) {\n        // Check if the component is still mounted before setting state.\n        if (!controller.signal.aborted) {\n          setError(err.message);\n          setIsLoading(false);\n        }\n      }\n    }\n    if ((query === null || query === void 0 ? void 0 : query.length) < 3) {\n      // Clear movies and error only if the component is still mounted.\n      if (!controller.signal.aborted) {\n        setMovies([]);\n        setError(\"\");\n      }\n      return;\n    }\n    //handleCloseMovie();\n    fetchMovies();\n\n    // Cleanup function: Abort the controller when the component unmounts or when 'query' changes.\n    return function () {\n      controller.abort();\n    };\n  }, [query]);\n  return {\n    movies,\n    isLoading,\n    error\n  };\n}\n_s(useMovies, \"U+znDQTK7eje4cwlxt5gS2qHcHc=\");","map":{"version":3,"names":["useState","useEffect","KEY","useMovies","query","_s","movies","setMovies","isLoading","setIsLoading","error","setError","controller","AbortController","fetchMovies","response","fetch","signal","ok","Error","data","json","Response","aborted","Search","err","message","length","abort"],"sources":["C:/Users/Robinson/Desktop/front_end/react/usePopcorn/src/useMovies.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nconst KEY = \"88a56d52\";\r\nexport function useMovies(query) {\r\n  const [movies, setMovies] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(\"\");\r\n  // const [query, setQuery] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    // callback?.();\r\n    // Create the AbortController instance.\r\n    const controller = new AbortController();\r\n\r\n    async function fetchMovies() {\r\n      try {\r\n        setError(\"\");\r\n        setIsLoading(true);\r\n\r\n        // Use the signal from the controller in the fetch request.\r\n        const response = await fetch(\r\n          `https://www.omdbapi.com/?s=${query}&apikey=${KEY}`,\r\n          { signal: controller.signal }\r\n        );\r\n\r\n        if (!response.ok) {\r\n          throw new Error(\"Something went wrong with fetching movies\");\r\n        }\r\n\r\n        const data = await response.json();\r\n\r\n        if (data.Response === \"False\") {\r\n          throw new Error(\"Movie not found\");\r\n        }\r\n\r\n        // Check if the component is still mounted before setting state.\r\n        if (!controller.signal.aborted) {\r\n          setMovies(data.Search);\r\n          setIsLoading(false);\r\n        }\r\n      } catch (err) {\r\n        // Check if the component is still mounted before setting state.\r\n        if (!controller.signal.aborted) {\r\n          setError(err.message);\r\n          setIsLoading(false);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (query?.length < 3) {\r\n      // Clear movies and error only if the component is still mounted.\r\n      if (!controller.signal.aborted) {\r\n        setMovies([]);\r\n        setError(\"\");\r\n      }\r\n      return;\r\n    }\r\n    //handleCloseMovie();\r\n    fetchMovies();\r\n\r\n    // Cleanup function: Abort the controller when the component unmounts or when 'query' changes.\r\n    return function () {\r\n      controller.abort();\r\n    };\r\n  }, [query]);\r\n\r\n  return { movies, isLoading, error };\r\n}\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,MAAMC,GAAG,GAAG,UAAU;AACtB,OAAO,SAASC,SAASA,CAACC,KAAK,EAAE;EAAAC,EAAA;EAC/B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACtC;;EAEAC,SAAS,CAAC,MAAM;IACd;IACA;IACA,MAAMW,UAAU,GAAG,IAAIC,eAAe,CAAC,CAAC;IAExC,eAAeC,WAAWA,CAAA,EAAG;MAC3B,IAAI;QACFH,QAAQ,CAAC,EAAE,CAAC;QACZF,YAAY,CAAC,IAAI,CAAC;;QAElB;QACA,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAC1B,8BAA8BZ,KAAK,WAAWF,GAAG,EAAE,EACnD;UAAEe,MAAM,EAAEL,UAAU,CAACK;QAAO,CAC9B,CAAC;QAED,IAAI,CAACF,QAAQ,CAACG,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,2CAA2C,CAAC;QAC9D;QAEA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;QAElC,IAAID,IAAI,CAACE,QAAQ,KAAK,OAAO,EAAE;UAC7B,MAAM,IAAIH,KAAK,CAAC,iBAAiB,CAAC;QACpC;;QAEA;QACA,IAAI,CAACP,UAAU,CAACK,MAAM,CAACM,OAAO,EAAE;UAC9BhB,SAAS,CAACa,IAAI,CAACI,MAAM,CAAC;UACtBf,YAAY,CAAC,KAAK,CAAC;QACrB;MACF,CAAC,CAAC,OAAOgB,GAAG,EAAE;QACZ;QACA,IAAI,CAACb,UAAU,CAACK,MAAM,CAACM,OAAO,EAAE;UAC9BZ,QAAQ,CAACc,GAAG,CAACC,OAAO,CAAC;UACrBjB,YAAY,CAAC,KAAK,CAAC;QACrB;MACF;IACF;IAEA,IAAI,CAAAL,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEuB,MAAM,IAAG,CAAC,EAAE;MACrB;MACA,IAAI,CAACf,UAAU,CAACK,MAAM,CAACM,OAAO,EAAE;QAC9BhB,SAAS,CAAC,EAAE,CAAC;QACbI,QAAQ,CAAC,EAAE,CAAC;MACd;MACA;IACF;IACA;IACAG,WAAW,CAAC,CAAC;;IAEb;IACA,OAAO,YAAY;MACjBF,UAAU,CAACgB,KAAK,CAAC,CAAC;IACpB,CAAC;EACH,CAAC,EAAE,CAACxB,KAAK,CAAC,CAAC;EAEX,OAAO;IAAEE,MAAM;IAAEE,SAAS;IAAEE;EAAM,CAAC;AACrC;AAACL,EAAA,CAhEeF,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}